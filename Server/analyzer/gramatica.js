/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,31],$V1=[1,18],$V2=[1,4],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,15],$Vb=[1,16],$Vc=[1,17],$Vd=[1,19],$Ve=[1,20],$Vf=[1,21],$Vg=[1,22],$Vh=[1,23],$Vi=[1,24],$Vj=[2,5,7,14,16,18,19,20,22,29,32,34,37,38,39,42,46,47,48,49,50,52,54],$Vk=[1,38],$Vl=[2,35],$Vm=[1,55],$Vn=[1,61],$Vo=[1,54],$Vp=[1,56],$Vq=[1,57],$Vr=[1,58],$Vs=[1,59],$Vt=[1,50],$Vu=[1,51],$Vv=[1,63],$Vw=[13,23,59,60,61,62,70,71,72,73,75,76,77,78],$Vx=[14,18],$Vy=[27,45],$Vz=[14,23,59,60,61,62,70,71,72,73,75,76,77,78],$VA=[13,23,45,59,60,61,62,70,71,72,73,75,76,77,78],$VB=[11,14,22,23,24,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78],$VC=[77,78],$VD=[2,81],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[1,92],$VL=[13,14,23,45,53,70,71,72,73,75,76,77,78],$VM=[13,14,45,53,70,71,72,73,75,76,77,78],$VN=[1,93],$VO=[1,94],$VP=[1,95],$VQ=[1,96],$VR=[1,97],$VS=[1,98],$VT=[13,14,23,45,53,70,71,72,73,75,76],$VU=[2,76],$VV=[1,99],$VW=[1,100],$VX=[13,14,23,45,53,59,60,61,62,70,71,72,73,75,76,77,78],$VY=[13,14,23,24,45,53,59,60,61,62,70,71,72,73,75,76,77,78],$VZ=[13,45],$V_=[2,45],$V$=[13,14,23,24,45,53,59,60,70,71,72,73,75,76,77,78],$V01=[13,14,45,53,77,78],$V11=[14,23,59,60,61,62],$V21=[1,151],$V31=[13,14,23,24,45,53,70,71,72,73,75,76,77,78],$V41=[1,170],$V51=[1,171],$V61=[18,52,54],$V71=[2,5,7,14,16,18,19,20,22,29,32,34,37,38,39,40,42,46,47,48,49,50,52,54],$V81=[14,18,52,54];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"System":7,"punto":8,"out":9,"println":10,"PARIZQ":11,"expresion_cadena":12,"PARDER":13,"PTCOMA":14,"imports":15,"RMIENTRAS":16,"LLAVIZQ":17,"LLAVDER":18,"RDO":19,"RPARA":20,"DECLARACION_FOR":21,"IDENTIFICADOR":22,"MAS":23,"MENOS":24,"DATO_TIPO":25,"LLAMADA_METODO":26,"IGUAL":27,"otraDeclaracion":28,"RIF":29,"ELSE_IF":30,"ELSE":31,"RVOID":32,"LP":33,"RSWITCH":34,"casos":35,"operadores":36,"RCLASS":37,"RBREAK":38,"return":39,"RELSE":40,"expresion_logica":41,"RIMPORT":42,"expresion_numerica":43,"DATOS":44,"COMA":45,"RNUMERO":46,"RBOOL":47,"RDOUBLE":48,"RCHAR":49,"RSTRING":50,"caso_evaluar":51,"RCASE":52,"DOSPTS":53,"RDEFAULT":54,"O_MAS":55,"O_MENOS":56,"O_POR":57,"O_DIVIDIDO":58,"POR":59,"DIVIDIDO":60,"ELEVACION":61,"MODULO":62,"ENTERO":63,"DECIMAL":64,"true":65,"false":66,"CADENA":67,"CADENACHAR":68,"expresion_relacional":69,"MAYQUE":70,"MENQUE":71,"MAYIGQUE":72,"MENIGQUE":73,"NOT":74,"DOBLEIG":75,"NOIG":76,"AND":77,"OR":78,"true_false":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"System",8:"punto",9:"out",10:"println",11:"PARIZQ",13:"PARDER",14:"PTCOMA",16:"RMIENTRAS",17:"LLAVIZQ",18:"LLAVDER",19:"RDO",20:"RPARA",22:"IDENTIFICADOR",23:"MAS",24:"MENOS",27:"IGUAL",29:"RIF",32:"RVOID",34:"RSWITCH",37:"RCLASS",38:"RBREAK",39:"return",40:"RELSE",42:"RIMPORT",45:"COMA",46:"RNUMERO",47:"RBOOL",48:"RDOUBLE",49:"RCHAR",50:"RSTRING",52:"RCASE",53:"DOSPTS",54:"RDEFAULT",55:"O_MAS",56:"O_MENOS",57:"O_POR",58:"O_DIVIDIDO",59:"POR",60:"DIVIDIDO",61:"ELEVACION",62:"MODULO",63:"ENTERO",64:"DECIMAL",65:"true",66:"false",67:"CADENA",68:"CADENACHAR",70:"MAYQUE",71:"MENQUE",72:"MAYIGQUE",73:"MENIGQUE",74:"NOT",75:"DOBLEIG",76:"NOIG",77:"AND",78:"OR"},
productions_: [0,[3,2],[4,2],[4,1],[6,9],[6,1],[6,7],[6,9],[6,13],[6,13],[6,3],[6,2],[6,4],[6,5],[6,9],[6,8],[6,8],[6,7],[6,4],[6,4],[6,4],[6,5],[6,2],[6,3],[6,2],[6,1],[30,9],[30,0],[31,4],[31,0],[15,3],[15,0],[21,3],[21,4],[26,4],[26,0],[44,3],[44,1],[25,1],[25,1],[25,1],[25,1],[25,1],[33,4],[33,2],[33,0],[28,3],[28,1],[35,2],[35,1],[51,4],[51,3],[36,1],[36,1],[36,1],[36,1],[43,2],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[12,3],[12,1],[12,1],[12,1],[12,1],[69,3],[69,3],[69,3],[69,3],[69,1],[69,2],[69,3],[69,3],[41,3],[41,3],[41,1],[79,1],[79,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST
		return $$[$0-1];
	
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = instruccionesAPI.nuevoImprimir($$[$0-2]); 
break;
case 5:
this.$ = $$[$0]
break;
case 6:
 this.$ = instruccionesAPI.nuevoMientras($$[$0-4], $$[$0-1]); 
break;
case 7:
 this.$ = instruccionesAPI.nuevoDo($$[$0-6],$$[$0-2])
break;
case 8: case 9:
 this.$ = instruccionesAPI.nuevoFor($$[$0-10],$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]) 
break;
case 10:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-1], $$[$0-2]); 
break;
case 11:
this.$ = instruccionesAPI.nuevaLlamadaMetodo($$[$0-1]);
break;
case 12:
 this.$ = instruccionesAPI.nuevoAsignacion($$[$0-3], $$[$0-1]); 
break;
case 13:
this.$ = instruccionesAPI.nuevoDeclaracionS($$[$0-3],$$[$0-1],$$[$0-4]);
break;
case 14:
 this.$ = instruccionesAPI.nuevoIf($$[$0-6],$$[$0-3],$$[$0-1],$$[$0]);
break;
case 15:
this.$ = instruccionesAPI.nuevoMetodo($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 16:
this.$ = instruccionesAPI.nuevoMetodoTipo($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1])
break;
case 17:
 this.$ = instruccionesAPI.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 18:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0-3], TIPO_OPERACION.AUMENTO); 
break;
case 19:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0-3], TIPO_OPERACION.DECREMENTO); 
break;
case 20:
 this.$ = instruccionesAPI.nuevoAsignacionSimplificada($$[$0-3], $$[$0-2], $$[$0-1]); 
break;
case 21:
 this.$ = instruccionesAPI.nuevoClass($$[$0-3],$$[$0-1]);
break;
case 22:
this.$ = instruccionesAPI.nuevoBreak($$[$0-1]);
break;
case 23:
this.$ = instruccionesAPI.nuevoReturnMetodoT($$[$0-2],$$[$0-1]);
break;
case 24:
this.$ = instruccionesAPI.nuevoReturnMetodo($$[$0-1]);
break;
case 25:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
	               var errorLixco = "error_sintactico";
				   err.nuevoError(yytext,this._$.first_line,this._$.first_column,errorLixco);
	          
break;
case 26:
this.$ = instruccionesAPI.nuevoElseIf($$[$0-8],$$[$0-4],$$[$0-1]);
break;
case 28:
this.$ = instruccionesAPI.nuevoElse($$[$0-3],$$[$0]);
break;
case 30:
this.$ = instruccionesAPI.nuevoImport($$[$0-1])
break;
case 32:

            this.$ = instruccionesAPI.nuevoAsignacion($$[$0-2],$$[$0]);	

break;
case 33:
this.$ = instruccionesAPI.nuevoDeclaracionS($$[$0-2],$$[$0],$$[$0-3]);
break;
case 34:
this.$ =  instruccionesAPI.nuevaLlamadaMetodoP($$[$0-3],$$[$0-1])
break;
case 36:
	   
   this.$ = instruccionesAPI.nuevoDatosMetodo($$[$0-2],$$[$0]);
 
   
break;
case 37:

           this.$ = instruccionesAPI.nuevoDatoMetodo($$[$0]);
	
break;
case 38:
this.$ = TIPO_DATO.NUMERO;
break;
case 39:
this.$ = TIPO_DATO.BOOLEAN;
break;
case 40:
this.$ = TIPO_DATO.DOUBLE;
break;
case 41:
this.$ = TIPO_DATO.CHAR;
break;
case 42:
this.$ = TIPO_DATO.STRING;
break;
case 43:
	   
   this.$ = instruccionesAPI.nuevoListaParametros($$[$0-3],$$[$0-1],$$[$0]);
 
   
break;
case 44:

           this.$ = instruccionesAPI.nuevoParametro($$[$0-1],$$[$0]);
	
break;
case 46:

			
			  this.$ = instruccionesAPI.pushDeclaraciones($$[$0-2],$$[$0]);	
	
break;
case 47:
this.$ = instruccionesAPI.pushDeclaracionesPPP($$[$0]);
break;
case 48:

      $$[$0-1].push($$[$0]);
	  this.$ = $$[$0-1];
    
break;
case 49:
 this.$ = instruccionesAPI.nuevoListaCasos($$[$0]);
break;
case 50:
 this.$ = instruccionesAPI.nuevoCaso($$[$0-2],$$[$0]); 
break;
case 51:
 this.$ = instruccionesAPI.nuevoCasoDef($$[$0]); 
break;
case 52:
 this.$ = instruccionesAPI.nuevoOperador(TIPO_OPERACION.SUMA); 
break;
case 53:
 this.$ = instruccionesAPI.nuevoOperador(TIPO_OPERACION.RESTA); 
break;
case 54:
 this.$ = instruccionesAPI.nuevoOperador(TIPO_OPERACION.MULTIPLICACION); 
break;
case 55:
 this.$ = instruccionesAPI.nuevoOperador(TIPO_OPERACION.DIVISION); 
break;
case 56:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 57:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 58:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 59:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 60:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 61:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA);
break;
case 62:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO)
break;
case 63:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0-2], TIPO_OPERACION.AUMENTO); 
break;
case 64:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0-2], TIPO_OPERACION.DECREMENTO); 
break;
case 65:
 this.$ = $$[$0-1]; 
break;
case 66: case 67:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 68:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.TRUE); 
break;
case 69:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.FALSE); 
break;
case 70:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.METODOLLAMADA);
break;
case 71:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 72:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.CONCATENACION); 
break;
case 73:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 74:
 this.$ = instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.CADENACHAR);
break;
case 75: case 87:
 this.$ = $$[$0]; 
break;
case 76: case 81: case 88: case 89:
this.$ = $$[$0];
break;
case 77:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 78:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE); 
break;
case 79:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 80:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 82:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 83:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL); 
break;
case 84:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NO_IGUAL); 
break;
case 85:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 86:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
}
},
table: [o([5,14],$V0,{3:1,4:2,6:3,15:5,25:9,26:10,2:$V1,7:$V2,16:$V3,19:$V4,20:$V5,22:$V6,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),{1:[3]},{2:$V1,5:[1,25],6:26,7:$V2,14:$V0,15:5,16:$V3,19:$V4,20:$V5,22:$V6,25:9,26:10,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi},o($Vj,[2,3]),{8:[1,27]},o($Vj,[2,5]),{11:[1,28]},{17:[1,29]},{11:[1,30]},{22:[1,31],28:32},{14:[1,33]},{11:$Vk,23:[1,35],24:[1,36],27:[1,34],36:37,55:[1,39],56:[1,40],57:[1,41],58:[1,42]},{11:[1,43]},{22:[1,44]},{11:[1,45]},{22:[1,46]},{14:[1,47]},o([23,59,60,61,62,70,71,72,73,75,76,77,78],$Vl,{12:48,43:52,41:53,26:60,69:62,11:$Vm,14:[1,49],22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),o($Vj,[2,25]),{22:[1,64]},{22:[2,38]},{22:[2,39]},{22:[2,40]},{22:[2,41]},{22:[2,42]},{1:[2,1]},o($Vj,[2,2]),{9:[1,65]},o($Vw,$Vl,{43:52,41:53,26:60,69:62,12:66,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),o($Vx,$V0,{6:3,15:5,25:9,26:10,4:67,2:$V1,7:$V2,16:$V3,19:$V4,20:$V5,22:$V6,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),{21:68,22:[1,69],25:70,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi},o($Vy,[2,47],{11:[1,72],14:[1,71]}),{27:[1,73],45:[1,74]},o($Vj,[2,11]),o($Vz,$Vl,{43:52,41:53,26:60,69:62,12:75,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),{23:[1,76]},{24:[1,77]},o($Vz,$Vl,{43:52,41:53,26:60,69:62,12:78,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),o($VA,$Vl,{43:52,41:53,26:60,69:62,44:79,12:80,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),o($VB,[2,52]),o($VB,[2,53]),o($VB,[2,54]),o($VB,[2,55]),o($Vw,$Vl,{43:52,41:53,26:60,69:62,12:81,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),{11:[1,82]},o($Vw,$Vl,{43:52,41:53,26:60,69:62,12:83,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),{17:[1,84]},o($Vj,[2,22]),o($VC,$VD,{14:[1,85],23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),o($Vj,[2,24]),o($VL,[2,73]),o($VL,[2,74]),o($VM,[2,75],{23:$VN,24:$VO,59:$VP,60:$VQ,61:$VR,62:$VS}),o($VT,$VU,{77:$VV,78:$VW}),o($VX,$Vl,{26:60,43:101,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($Vw,$Vl,{43:52,41:53,26:60,69:62,12:102,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),o($VY,[2,66]),o($VY,[2,67]),o($VY,[2,68]),o($VY,[2,69]),o($VY,[2,70]),o($VY,[2,71],{11:$Vk}),o($VL,[2,87]),o($VX,$Vl,{43:52,26:60,69:62,41:103,12:104,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),{14:[1,105]},{8:[1,106]},o($VC,$VD,{13:[1,107],23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),{2:$V1,6:26,7:$V2,14:$V0,15:5,16:$V3,18:[1,108],19:$V4,20:$V5,22:$V6,25:9,26:10,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi},{14:[1,109]},{27:[1,110]},{22:[1,111]},o($Vj,[2,10]),o($VZ,$V_,{33:112,25:113,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),o($Vz,$Vl,{43:52,41:53,26:60,69:62,12:114,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),{22:[1,115]},o($VC,$VD,{14:[1,116],23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),{14:[1,117]},{14:[1,118]},o($VC,$VD,{14:[1,119],23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),{13:[1,120],45:[1,121]},o([13,45,77,78],[2,37],{23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),o($VC,$VD,{13:[1,122],23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),o($VZ,$V_,{25:113,33:123,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),o($VC,$VD,{13:[1,124],23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),o($Vx,$V0,{6:3,15:5,25:9,26:10,4:125,2:$V1,7:$V2,16:$V3,19:$V4,20:$V5,22:$V6,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),o($Vj,[2,23]),o($VX,$Vl,{43:52,41:53,26:60,69:62,12:126,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),o($VX,$Vl,{43:52,41:53,26:60,69:62,12:127,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),o($VX,$Vl,{43:52,41:53,26:60,69:62,12:128,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),o($VX,$Vl,{43:52,41:53,26:60,69:62,12:129,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),o($VX,$Vl,{43:52,41:53,26:60,69:62,12:130,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),o($VX,$Vl,{43:52,41:53,26:60,69:62,12:131,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),o($VX,$Vl,{43:52,41:53,26:60,69:62,12:132,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),o([13,14,45,53,59,60,61,62,70,71,72,73,75,76,77,78],$Vl,{26:60,43:133,11:$Vm,22:$Vn,23:[1,134],24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($VX,$Vl,{26:60,43:135,11:$Vm,22:$Vn,24:[1,136],63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($VX,$Vl,{26:60,43:137,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($VX,$Vl,{26:60,43:138,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($VX,$Vl,{26:60,43:139,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($VX,$Vl,{26:60,43:140,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($VX,$Vl,{43:52,41:53,26:60,12:104,69:141,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),o($VX,$Vl,{43:52,41:53,26:60,12:104,69:142,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),o($V$,[2,56],{61:$VR,62:$VS}),o($VC,$VD,{13:[1,143],23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),o($VT,[2,82],{77:$VV,78:$VW}),o($V01,$VD,{23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),o($Vj,[2,30]),{10:[1,144]},{17:[1,145]},{16:[1,146]},o($Vz,$Vl,{43:52,41:53,26:60,69:62,12:147,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),o($V11,$Vl,{26:60,43:148,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),{27:[1,149]},{13:[1,150],45:$V21},{22:[1,152]},o($VC,$VD,{14:[1,153],23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),o($Vy,[2,46]),o($Vj,[2,12]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($VY,[2,34]),o($VA,$Vl,{43:52,41:53,26:60,69:62,12:154,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),{17:[1,155]},{13:[1,156],45:$V21},{17:[1,157]},{2:$V1,6:26,7:$V2,14:$V0,15:5,16:$V3,18:[1,158],19:$V4,20:$V5,22:$V6,25:9,26:10,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi},o([13,14,23,45,53,77,78],[2,72],{70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),o($V01,[2,77],{23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),o($V01,[2,78],{23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),o($V01,[2,79],{23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),o($V01,[2,80],{23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),o($V01,[2,83],{23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),o($V01,[2,84],{23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),o($V31,[2,57],{59:$VP,60:$VQ,61:$VR,62:$VS}),o($VY,[2,63]),o($V31,[2,58],{59:$VP,60:$VQ,61:$VR,62:$VS}),o($VY,[2,64],{26:60,43:101,11:$Vm,22:$Vn,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($V$,[2,59],{61:$VR,62:$VS}),o($V$,[2,60],{61:$VR,62:$VS}),o($VM,[2,61],{23:$VN,24:$VO,59:$VP,60:$VQ,61:$VR,62:$VS}),o($VM,[2,62],{23:$VN,24:$VO,59:$VP,60:$VQ,61:$VR,62:$VS}),o($VL,[2,85]),o($VL,[2,86]),o($VY,[2,65]),{11:[1,159]},o($Vx,$V0,{6:3,15:5,25:9,26:10,4:160,2:$V1,7:$V2,16:$V3,19:$V4,20:$V5,22:$V6,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),{11:[1,161]},o($VC,$VD,{14:[1,162],23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),{14:[2,32],23:$VN,24:$VO,59:$VP,60:$VQ,61:$VR,62:$VS},o($V11,$Vl,{26:60,43:163,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),{17:[1,164]},{25:165,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi},o($VZ,[2,44]),o($Vj,[2,13]),o($VZ,[2,36],{23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK,77:$VD,78:$VD}),o($Vx,$V0,{6:3,15:5,25:9,26:10,4:166,2:$V1,7:$V2,16:$V3,19:$V4,20:$V5,22:$V6,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),{17:[1,167]},{35:168,51:169,52:$V41,54:$V51},o($Vj,[2,21]),o($Vw,$Vl,{43:52,41:53,26:60,69:62,12:172,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),{2:$V1,6:26,7:$V2,14:$V0,15:5,16:$V3,18:[1,173],19:$V4,20:$V5,22:$V6,25:9,26:10,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi},o($Vw,$Vl,{43:52,41:53,26:60,69:62,12:174,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),{22:[1,175]},{14:[2,33],23:$VN,24:$VO,59:$VP,60:$VQ,61:$VR,62:$VS},o($Vx,$V0,{6:3,15:5,25:9,26:10,4:176,2:$V1,7:$V2,16:$V3,19:$V4,20:$V5,22:$V6,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),{22:[1,177]},{2:$V1,6:26,7:$V2,14:$V0,15:5,16:$V3,18:[1,178],19:$V4,20:$V5,22:$V6,25:9,26:10,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi},o($Vx,$V0,{6:3,15:5,25:9,26:10,4:179,2:$V1,7:$V2,16:$V3,19:$V4,20:$V5,22:$V6,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),{18:[1,180],51:181,52:$V41,54:$V51},o($V61,[2,49]),o([23,53,59,60,61,62,70,71,72,73,75,76,77,78],$Vl,{43:52,41:53,26:60,69:62,12:182,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),{53:[1,183]},o($VC,$VD,{13:[1,184],23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),o($Vj,[2,6]),o($VC,$VD,{13:[1,185],23:$VE,70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),{23:[1,186],24:[1,187]},{2:$V1,6:26,7:$V2,14:$V0,15:5,16:$V3,18:[1,188],19:$V4,20:$V5,22:$V6,25:9,26:10,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi},o($VZ,[2,43]),o($V71,[2,27],{30:189}),{2:$V1,6:26,7:$V2,14:$V0,15:5,16:$V3,18:[1,190],19:$V4,20:$V5,22:$V6,25:9,26:10,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi},o($Vj,[2,17]),o($V61,[2,48]),o($VC,$VD,{23:$VE,53:[1,191],70:$VF,71:$VG,72:$VH,73:$VI,75:$VJ,76:$VK}),o($V81,$V0,{6:3,15:5,25:9,26:10,4:192,2:$V1,7:$V2,16:$V3,19:$V4,20:$V5,22:$V6,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),{14:[1,193]},{14:[1,194]},{23:[1,195]},{24:[1,196]},o($Vj,[2,16]),o($Vj,[2,29],{31:197,40:[1,198]}),o($Vj,[2,15]),o($V81,$V0,{6:3,15:5,25:9,26:10,4:199,2:$V1,7:$V2,16:$V3,19:$V4,20:$V5,22:$V6,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),o($V61,[2,51],{15:5,25:9,26:10,6:26,2:$V1,7:$V2,14:$V0,16:$V3,19:$V4,20:$V5,22:$V6,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),o($Vj,[2,4]),o($Vj,[2,7]),{13:[1,200]},{13:[1,201]},o($Vj,[2,14]),{17:[1,203],29:[1,202]},o($V61,[2,50],{15:5,25:9,26:10,6:26,2:$V1,7:$V2,14:$V0,16:$V3,19:$V4,20:$V5,22:$V6,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),{17:[1,204]},{17:[1,205]},{11:[1,206]},o($Vx,$V0,{6:3,15:5,25:9,26:10,4:207,2:$V1,7:$V2,16:$V3,19:$V4,20:$V5,22:$V6,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),o($Vx,$V0,{6:3,15:5,25:9,26:10,4:208,2:$V1,7:$V2,16:$V3,19:$V4,20:$V5,22:$V6,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),o($Vx,$V0,{6:3,15:5,25:9,26:10,4:209,2:$V1,7:$V2,16:$V3,19:$V4,20:$V5,22:$V6,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),o($Vw,$Vl,{43:52,26:60,69:62,12:104,41:210,11:$Vm,22:$Vn,24:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,74:$Vv}),{2:$V1,6:26,7:$V2,14:$V0,15:5,16:$V3,18:[1,211],19:$V4,20:$V5,22:$V6,25:9,26:10,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi},{2:$V1,6:26,7:$V2,14:$V0,15:5,16:$V3,18:[1,212],19:$V4,20:$V5,22:$V6,25:9,26:10,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi},{2:$V1,6:26,7:$V2,14:$V0,15:5,16:$V3,18:[1,213],19:$V4,20:$V5,22:$V6,25:9,26:10,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi},o([23,70,71,72,73,75,76],$VU,{13:[1,214],77:$VV,78:$VW}),o($Vj,[2,28]),o($Vj,[2,8]),o($Vj,[2,9]),{17:[1,215]},o($Vx,$V0,{6:3,15:5,25:9,26:10,4:216,2:$V1,7:$V2,16:$V3,19:$V4,20:$V5,22:$V6,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi}),{2:$V1,6:26,7:$V2,14:$V0,15:5,16:$V3,18:[1,217],19:$V4,20:$V5,22:$V6,25:9,26:10,29:$V7,32:$V8,34:$V9,37:$Va,38:$Vb,39:$Vc,42:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi},o($V71,[2,26])],
defaultActions: {20:[2,38],21:[2,39],22:[2,40],23:[2,41],24:[2,42],25:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const TIPO_ERROR 		= require('./instrucciones').TIPO_ERROR;
	const TIPO_DATO			= require('./tabla_simbolos').TIPO_DATO; //para jalar el tipo de dato
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	const err = require('./instrucciones').err;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple l√≠nea
break;
case 2:// comentario multiple l√≠neas
break;
case 3:return 'RIMPRIMIR';
break;
case 4:return 46;
break;
case 5:return 48;
break;
case 6:return 49;
break;
case 7:return 47;
break;
case 8:return 50;
break;
case 9:return 19;
break;
case 10:return 16;
break;
case 11:return 29;
break;
case 12:return 40;
break;
case 13:return 20;
break;
case 14:return 34;
break;
case 15:return 52;
break;
case 16:return 54;
break;
case 17:return 38;
break;
case 18:return 'RCONTINUE';
break;
case 19:return 37
break;
case 20:return 32;
break;
case 21:return 42;
break;
case 22:return 7;
break;
case 23:return 8;
break;
case 24:return 9;
break;
case 25:return 10;
break;
case 26:return 65;
break;
case 27:return 66;
break;
case 28:return 39;
break;
case 29:return 53;
break;
case 30:return 14;
break;
case 31:return 45;
break;
case 32:return 17;
break;
case 33:return 18;
break;
case 34:return 11;
break;
case 35:return 13;
break;
case 36:return 55;
break;
case 37:return 56;
break;
case 38:return 57;
break;
case 39:return 58;
break;
case 40:return 77
break;
case 41:return 78;
break;
case 42:return 23;
break;
case 43:return 24;
break;
case 44:return 59;
break;
case 45:return 61;
break;
case 46:return 62;
break;
case 47:return 60;
break;
case 48:return 'CONCAT';
break;
case 49:return 73;
break;
case 50:return 72;
break;
case 51:return 75;
break;
case 52:return 76;
break;
case 53:return 71;
break;
case 54:return 70;
break;
case 55:return 27;
break;
case 56:return 74;
break;
case 57: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 67; 
break;
case 58: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 68; 
break;
case 59:return 64;
break;
case 60:return 63;
break;
case 61:return 22;
break;
case 62:return 5;
break;
case 63: console.error ('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
                       err.nuevoError(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column,TIPO_ERROR.LEXICO);
					
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:imprimir\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:String\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:class\b)/,/^(?:void\b)/,/^(?:import\b)/,/^(?:System\b)/,/^(?:\.)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\/)/,/^(?:&)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:!)/,/^(?:"([^\\\"\n]|\\.)*")/,/^(?:'[^\']*')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}